# 001__init__.py文件
"""
# 该文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有__init__.py 文件。
# 通常__init__.py 文件为空，但是我们还可以为它增加其他的功能。我们在导入一个包时，实际上是导入了它的__init__.py文件。这样我们可以在__init__.py文件中批量导入我们所需要的模块，而不再需要一个一个的导入。
# 注意访问__init__.py文件中的引用文件，需要加上包名。

# __init__.py中还有一个重要的变量，__all__, 它用来将模块全部导入。

可以被import语句导入的对象是以下类型：
包（包含多个模块）
模块文件（.py文件）
C或C++扩展（已编译为共享库或DLL文件）
内建模块（使用C编写并已链接到Python解释器中）
"""

# 002__main__变量
"""
首先需要了解 __name__ 是属于 python 中的内置类属性，就是它会天生就存在于一个 python 程序中，代表对应程序名称。
__main__中存放的是当前执行代码所属的模块名；例如import model，方法model.func()中有print(__name__),输出的就是model；如果执行的代码是自己本模块的，输出的就是默认值：__main__
"""

# 003 set()
"""
使用set()可以将list转化为元祖，去除重复元素，在排序后再转化有妙用
"""

# 004动态规划思想
"""
从后往前设计，拆分成n、dp[n-1]/dp[n-2]来表达dp[n],层层递进表达
"""
